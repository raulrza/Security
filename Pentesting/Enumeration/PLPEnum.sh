#!/bin/bash
# Author: @raulbringasjr (r4mzih4x)
# PLP Enumeration (Pretty Lame Port Enumeration)
# Version 0.2

# This script will perform many of the manual steps during enumeration
# The idea is to build a framework that automatically peforms enumeration tasks based on findings
# Example:  If port 80 is found, perform wfuzz/gobuster, save results to file and determine what's next
# If port 21 exists an anonymous FTP connection and enumeration will be attempted, etc.
##  TODO: 
##  -Add detection for non-responsive host
##  -Run WFUZZ and jobs as backgronud processes and output PID so we can Forground on demand in different terminals
##  -Tee output to log file
##  -Continue adding port based logic for enum/attack
##  -Error and exception handling
##  -Summary of suggested attacks
##  -Leverage nmap scripts depending on scan results, searchsploit, etc.
#   -Parse NMAP output for any output of the versions or vulnerabilities
#   -Add logic and launcher for tools to be used depending on ports available to post enum functions
# Port 80
# Search for robots.txt
## Parse for any specific paths and add them to custom wordlist to fuzz (Thorough Mode)

echo ' _______   __        _______         ________'
echo '/       \ /  |      /       \       /        |'
echo '$$$$$$$  |$$ |      $$$$$$$  |      $$$$$$$$/  _______   __    __  _____  ____'
echo '$$ |__$$ |$$ |      $$ |__$$ |      $$ |__    /       \ /  |  /  |/     \/    \'
echo '$$    $$/ $$ |      $$    $$/       $$    |   $$$$$$$  |$$ |  $$ |$$$$$$ $$$$  |'
echo '$$$$$$$/  $$ |      $$$$$$$/        $$$$$/    $$ |  $$ |$$ |  $$ |$$ | $$ | $$ |'
echo '$$ |      $$ |_____ $$ |            $$ |_____ $$ |  $$ |$$ \__$$ |$$ | $$ | $$ |'
echo '$$ |      $$       |$$ |            $$       |$$ |  $$ |$$    $$/ $$ | $$ | $$ |'
echo '$$/       $$$$$$$$/ $$/             $$$$$$$$/ $$/   $$/  $$$$$$/  $$/  $$/  $$/'
echo                                                                                 
echo "-== PLP Enumeration and Penetration Suggestion Framework 0.2 ==-" 
echo

# Make sure the script is running as root
if [ "$(whoami)" != 'root' ]; then
        echo "You have to run $0 as root..."
        exit 1;
fi


# Grab flags from command line for advanced usage
thorough='false'
verbose='false'

print_usage() {
  printf "Usage: ..."
  echo ""
  echo "./PLPEnum.sh Hostname IP-Address"
  echo "./PLPEnum.sh giddy 10.10.10.3 -t -v"
  echo " -t : Thorough mode runs additional tests."
  echo " -v : Verbose mode increased output."
  echo " -o filename : Output file location to save script results."
}

while getopts 'o:tv' flag; do
  case "${flag}" in
    o) output="${OPTARG}" ;;
    t) thorough="true"; echo "Thorough mode enabled..." ;;
    v) verbose="true" ;;
    *) print_usage
       exit 1 ;;
  esac
done

if [ $# -lt 1 ]; then
	print_usage
	exit 1;
fi

# Grab host name and ip address from command line input
hostName=$1
hostIP=$2

echo "The host name of the machine you wish to scan is: $1"
echo "The IP address of the machine you wish to scan is: $2"

################################################################################
# Function Declarations				    			       #
################################################################################
enumPort21 ()
{
	echo "Starting Port 21 Enumeration..."
	if grep -q "ftp-anon" "$hostDir/nmap/$hostName.nmap"; then 
		echo "ATTENTION: FTP Papas Fritas!!!"
		echo "Anonymous FTP login enabled!"
		# Try to initiatite an anonymous ftp login and file download
		echo "Starting Anonymous FTP Exploit tasks..."
		echo "Downloading files to $hostDir/ftp..."
		wget -P $hostDir/ftp -m --no-passive ftp://anonymous:anonymous@$hostIP &>/dev/null &
		ftpSuggestedAttack="Anonymous FTP Login"
	fi
}

enumPort53 ()
{

	echo "Starting Port 53 Enumeration..."
	# Attempt DNS Zone Transfer
	dig @$hostIP $hostName axfr > "$hostDir/DNS-zone-xfer.log"
	echo "Port 53 enumeration results saved in '$hostDir/DNS-zone-xfer.log'"
}

enumPort79 ()
{
	echo "Starting Port 79 Enumeration..."
	finger @ $hostIP > "$hostDir/finger-enumeration.log"
	echo "Finger results stored in '$hostDir/finger-enumeration.log'"	

}

enumPort80 ()
{

	echo "Starting Port 80 Enumeration..."
	echo "Starting wfuzz on $hostIP, output saved to $hostDir/http-root_wfuzz.csv"
	wfuzz -f $hostDir/http-root_wfuzz.csv,csv -c -w /usr/share/wordlists/SecLists/Discovery/Web-Content/raft-large-directories.txt --sc 200,301 http://$hostIP/FUZZ > /dev/null 2>&1 &
	echo "Starting gobuster on $hostIP, output saved to $hostDir/http-root.log"
  	gobuster -t 100 -u http://$hostIP:80 -w /usr/share/wordlists/SecLists/Discovery/Web-Content/raft-large-directories.txt "$hostDir/http-root.log"

	# Add logic to test robots.txt and parse directories for wfuzz...
	# Thorough Mode
}



enumPort161 ()
{
	
	
	echo "Starting Port 161 Enumeration..."
	snmpwalk -c public -v1 $hostIP > "$hostDir/snmpwalk.log"
	echo "SNMP Walk results saved in '$hostDir/snmpwalk.log'..."
}


enumPort443 ()
{

	echo "Starting port 443 Enumeration..."

}


enumPort445 ()
{

	echo "Starting port 445 Enumeration..."
	smbmap -H $hostIP > "$hostDir/smb-enumeration.log"
	echo "SMB enumeration saved to '$hostDir/smb-enumeration.log'"

}


# Implement additional port logic...
#enumPort ()
#{

#}

# Add hostName to /etc/hosts for DNS xfr
echo "$hostIP	$hostName" >> /etc/hosts
echo "An entry for $hostName has been added to /etc/hosts..."
echo

# Create directory structure for enum info
hostDir="/home/HTB/Machines/$hostName"
mkdir -p "$hostDir"
echo "A directory has been created for $hostName in $hostDir..."
echo

# Run the standard NMAP
mkdir -p "$hostDir/nmap"
echo "Running an NMAP scan on $hostName - $hostIP"
nmap -sC -sV -oA "$hostDir/nmap/$hostName" $hostIP #> /dev/null 2>&1
echo

if [ "$thorough" = true ]; then 

	# Background an all ports NMAP (Only in Thorough mode)
	echo "Running a full NMAP scan in the background..."
	nmap -p- -oA "$hostDir/nmap/$hostName-full" $hostIP &
	echo

	# Background a UDP nmap (Only in Thorough Mode)
	echo "Running a full UDP NMAP scan in the background..."
	nmap -sU -oA "$hostDir/nmap/$hostName-udp" $hostIP &
	echo

fi

# Gather list of open ports from NMAP scan
echo
openPorts=`grep -i open $hostDir/nmap/$hostName.nmap | cut -f1 -d/`
echo "The following ports have been detected as open:"
echo $openPorts

# For loop with Case statement to perform port based actions
for port in $openPorts; do
	case $port in
		21)
		  # Call the Port 21 enum function
		  enumPort21
		  Message="Finished Port $port tasks... Suggested Attacks: $ftpSuggestedAttack"
		  ;;
		53)
  		  # Call the port 53 enum function
		  enumPort53
		  Message="Finished port $port tasks..."
  		  ;;
	  	79)
		  # Call the port 79 enum function
		  enumPort79
 		  Message="Finished port $port tasks..."
		  ;;
		80)
		  # Call the port 80 enum function
		  enumPort80
		  Message="Finished port $port tasks..."
  		  ;;
	  	161)
		  # Call the port 161 enum function
		  enumPort161
		  Message="Finished port $port tasks..."
		  ;;
	  	443)
		  # Call the port 443 enum function
		  enumPort443
 		  Message="Finished port $port tasks..."
		  ;;
	  	445)
		  # Call the port 445 enum function
		  enumPort445
 		  Message="Finished port $port tasks..."
		  ;;
		*)
  		  # This message is printed when a new port is found
		  Message="ALERT: New port $port detected, add it to the script..."
  		  ;;
	esac

	echo $Message
done
